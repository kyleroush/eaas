{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","result","url","_this2","fetch","method","headers","Content-Type","then","res","json","setState","message","react_default","a","createElement","id","map","item","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kLCmJzBC,iCA5Ib,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,OAAQ,IAEVV,EAAKW,IAAM,8DAPMX,mFAaC,IAAAY,EAAAT,KAElBU,MAAMV,KAAKQ,IAAM,eACb,CAAEG,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBAInBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACP,GACCE,EAAKQ,SAAS,CACZX,UAAU,EACVC,OAAQA,KAMZ,SAACF,GACCI,EAAKQ,SAAS,CACZX,UAAU,EACVD,MAAOA,EAAMa,6CA8BvB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,8DAGFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,6FACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,YAAO,0DAETF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACEF,EAAAC,EAAAC,cAAA,gIACAF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,YAAO,+BACTF,EAAAC,EAAAC,cAAA,kBACEF,EAAAC,EAAAC,cAAA,kFACAF,EAAAC,EAAAC,cAAA,4CAGNF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,8EACAF,EAAAC,EAAAC,cAAA,YAAOrB,KAAKQ,IAAM,kBAEpBW,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACCrB,KAAKI,MAAME,SACVa,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,sBAEDrB,KAAKI,MAAMG,OAAOgB,IAAI,SAAAC,GAAI,OACzBL,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,UAAKG,EAAKC,KACVN,EAAAC,EAAAC,cAAA,UAAKG,EAAKN,aAKdC,EAAAC,EAAAC,cAAA,yBAEJF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,iDAEFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,ylBAnIQK,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.d96c12f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      result: {},\n    };      \n    this.url = \"https://7siim5bbqh.execute-api.us-east-1.amazonaws.com/Prod\"\n\n  }\n\n  \n\n  componentDidMount() {\n\n    fetch(this.url + \"?format=list\", \n        { method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n          }\n        })\n        .then(res => res.json())\n        .then(\n          (result) => {\n            this.setState({\n              isLoaded: true,\n              result: result,\n            });\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n            this.setState({\n              isLoaded: false,\n              error: error.message\n            });\n          }\n        )\n  }\n\n  render() {\n\n    // title \"Will you please excuse me\"\n    // intro (one liner) \"When there is no excuse for not having an excuse\"\n    // api functionalities \n    //    Content-type\n    //    Format\n    //    \n    // integrations (aka slack)\n    // operations\n    //     iternate over the list endpoint\n    // future goals\n        // split list apart into sperate function\n        // use diferent sub modules for excuses\n        // add searching ability to this website\n        // params that can take in multi value\n    // about me\n        // I was at work and couldnt focus on my assigned work so i decided to spice life up a little and write a new service in go\n        // (you why not avoid doing real work when you can just make excuses). While at the same time a friend was asking me for help\n        // so natuary I wanted to send him one of the the nice and friendlt messages from foass.com. But while those are fun they didn't\n        // capture my desire to have an excuse about not helping him or not doing my work or just why i dont want to adult some times. So \n        // I decided to use my slacking off to make sure I always could have an excuse handy.\n\n\n    return(\n      <div>\n        <div id=\"head\">\n          <h1>Will you please excuse me</h1>\n          <p>When there is no excuse for not having an excuse</p>\n        </div>\n        {/* table of contents maybe */}\n        <div>\n          <h2>Api Functionalities</h2>\n          <h3>Content-type</h3>\n          <ul>\n            <li>text/html</li>\n            <p>This is the default response content type for when a request is made to the page</p>\n            <li>application/json</li>\n            <p>in the format</p>\n            <code>{'{\"to\":\"to\", \"from\":\"from\", \"memo\":\"excuse goes here\"}'}</code>\n          </ul>\n          <p>Format</p>\n          <ul>\n            <li>slack</li>\n              <p>This return the response in a format that can be interpreted by slack to automatically intergrate with there format</p>\n              <p>It will always repond as json</p>\n              <code>{'{\"text\":\"excuse goes here\"}'}</code>\n            <li>list</li>\n              <p>This returns a list of all the possible commands and how they respond</p>\n              <p>It will always repond as json</p>\n          </ul>\n        </div>\n        <div>\n          <h2>Integrations</h2>\n          <h3>Slack</h3>\n          <p>IN PROGRESS needs to be released</p>\n          <p>you can add your own slack bot all you need to do is specify url:</p>\n          <code>{this.url + \"?format=slack\"}</code>\n        </div>\n        <div>\n          <h2>Operations</h2>\n          {this.state.isLoaded?\n            <table>\n              <tr>\n                <th>Key</th>\n                <th>Message</th>\n              </tr>\n              {this.state.result.map(item => (\n                <tr>\n                <td>{item.key}</td>\n                <td>{item.message}</td>\n              </tr>\n              ))}\n            </table>\n            :\n            <p>Loading ...</p>}\n        </div>\n        <div>\n          <h2>future goals</h2>\n          <p>Discord</p>\n          <p>split list apart into sperate function</p>\n          <p>use diferent sub modules for excuses</p>\n          <p>add searching ability to this website</p>\n          <p>params that can take in multi value</p>\n        </div>\n        <div>\n          <h2>about me</h2>\n          <p>I was at work and couldnt focus on my assigned work so i decided to spice life up a little and write a new service in go\n        (you why not avoid doing real work when you can just make excuses). While at the same time a friend was asking me for help\n        so natuary I wanted to send him one of the the nice and friendlt messages from foass.com. But while those are fun they didn't\n        capture my desire to have an excuse about not helping him or not doing my work or just why i dont want to adult some times. So \n        I decided to use my slacking off to make sure I always could have an excuse handy.</p>\n        </div>\n      </div>)\n  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}